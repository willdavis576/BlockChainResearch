// Generated by gencpp from file blockChainPack_/stringMultiarray.msg
// DO NOT EDIT!


#ifndef BLOCKCHAINPACK__MESSAGE_STRINGMULTIARRAY_H
#define BLOCKCHAINPACK__MESSAGE_STRINGMULTIARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace blockChainPack_
{
template <class ContainerAllocator>
struct stringMultiarray_
{
  typedef stringMultiarray_<ContainerAllocator> Type;

  stringMultiarray_()
    : prodNum(0)
    , blocks()  {
    }
  stringMultiarray_(const ContainerAllocator& _alloc)
    : prodNum(0)
    , blocks(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _prodNum_type;
  _prodNum_type prodNum;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _blocks_type;
  _blocks_type blocks;





  typedef boost::shared_ptr< ::blockChainPack_::stringMultiarray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::blockChainPack_::stringMultiarray_<ContainerAllocator> const> ConstPtr;

}; // struct stringMultiarray_

typedef ::blockChainPack_::stringMultiarray_<std::allocator<void> > stringMultiarray;

typedef boost::shared_ptr< ::blockChainPack_::stringMultiarray > stringMultiarrayPtr;
typedef boost::shared_ptr< ::blockChainPack_::stringMultiarray const> stringMultiarrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::blockChainPack_::stringMultiarray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::blockChainPack_::stringMultiarray_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace blockChainPack_

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'blockChainPack_': ['/home/ros/blockChainGit/00blockChain_ws/src/blockChainPack_/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::blockChainPack_::stringMultiarray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::blockChainPack_::stringMultiarray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::blockChainPack_::stringMultiarray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::blockChainPack_::stringMultiarray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::blockChainPack_::stringMultiarray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::blockChainPack_::stringMultiarray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::blockChainPack_::stringMultiarray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "accb76f5450794af9ee3f3f81a5ea7c0";
  }

  static const char* value(const ::blockChainPack_::stringMultiarray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaccb76f5450794afULL;
  static const uint64_t static_value2 = 0x9ee3f3f81a5ea7c0ULL;
};

template<class ContainerAllocator>
struct DataType< ::blockChainPack_::stringMultiarray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "blockChainPack_/stringMultiarray";
  }

  static const char* value(const ::blockChainPack_::stringMultiarray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::blockChainPack_::stringMultiarray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 prodNum\n\
string[] blocks\n\
";
  }

  static const char* value(const ::blockChainPack_::stringMultiarray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::blockChainPack_::stringMultiarray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.prodNum);
      stream.next(m.blocks);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct stringMultiarray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::blockChainPack_::stringMultiarray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::blockChainPack_::stringMultiarray_<ContainerAllocator>& v)
  {
    s << indent << "prodNum: ";
    Printer<int32_t>::stream(s, indent + "  ", v.prodNum);
    s << indent << "blocks[]" << std::endl;
    for (size_t i = 0; i < v.blocks.size(); ++i)
    {
      s << indent << "  blocks[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.blocks[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BLOCKCHAINPACK__MESSAGE_STRINGMULTIARRAY_H
