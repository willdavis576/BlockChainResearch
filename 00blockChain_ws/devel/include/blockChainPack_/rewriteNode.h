// Generated by gencpp from file blockChainPack_/rewriteNode.msg
// DO NOT EDIT!


#ifndef BLOCKCHAINPACK__MESSAGE_REWRITENODE_H
#define BLOCKCHAINPACK__MESSAGE_REWRITENODE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace blockChainPack_
{
template <class ContainerAllocator>
struct rewriteNode_
{
  typedef rewriteNode_<ContainerAllocator> Type;

  rewriteNode_()
    : arrayTransfer()
    , fileName()
    , logFile()
    , logHash()
    , fileOrArray()
    , REcounter(0)
    , carrier(0)
    , done(0)  {
    }
  rewriteNode_(const ContainerAllocator& _alloc)
    : arrayTransfer(_alloc)
    , fileName(_alloc)
    , logFile(_alloc)
    , logHash(_alloc)
    , fileOrArray(_alloc)
    , REcounter(0)
    , carrier(0)
    , done(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _arrayTransfer_type;
  _arrayTransfer_type arrayTransfer;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _fileName_type;
  _fileName_type fileName;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _logFile_type;
  _logFile_type logFile;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _logHash_type;
  _logHash_type logHash;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _fileOrArray_type;
  _fileOrArray_type fileOrArray;

   typedef int64_t _REcounter_type;
  _REcounter_type REcounter;

   typedef int64_t _carrier_type;
  _carrier_type carrier;

   typedef int64_t _done_type;
  _done_type done;





  typedef boost::shared_ptr< ::blockChainPack_::rewriteNode_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::blockChainPack_::rewriteNode_<ContainerAllocator> const> ConstPtr;

}; // struct rewriteNode_

typedef ::blockChainPack_::rewriteNode_<std::allocator<void> > rewriteNode;

typedef boost::shared_ptr< ::blockChainPack_::rewriteNode > rewriteNodePtr;
typedef boost::shared_ptr< ::blockChainPack_::rewriteNode const> rewriteNodeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::blockChainPack_::rewriteNode_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::blockChainPack_::rewriteNode_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace blockChainPack_

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
<<<<<<< HEAD
// {'blockChainPack_': ['/home/pi/blockChainGit/00blockChain_ws/src/blockChainPack_/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}
=======
// {'blockChainPack_': ['/home/ros/blockChainGit/00blockChain_ws/src/blockChainPack_/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}
>>>>>>> 04495caef248ff88c82b4aada68a5c73c263b2d4

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::blockChainPack_::rewriteNode_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::blockChainPack_::rewriteNode_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::blockChainPack_::rewriteNode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::blockChainPack_::rewriteNode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::blockChainPack_::rewriteNode_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::blockChainPack_::rewriteNode_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::blockChainPack_::rewriteNode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "085590d527d397fa9632b68bed17ef19";
  }

  static const char* value(const ::blockChainPack_::rewriteNode_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x085590d527d397faULL;
  static const uint64_t static_value2 = 0x9632b68bed17ef19ULL;
};

template<class ContainerAllocator>
struct DataType< ::blockChainPack_::rewriteNode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "blockChainPack_/rewriteNode";
  }

  static const char* value(const ::blockChainPack_::rewriteNode_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::blockChainPack_::rewriteNode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string arrayTransfer\n\
string fileName\n\
string logFile\n\
string logHash\n\
string fileOrArray\n\
int64 REcounter\n\
int64 carrier\n\
int64 done\n\
";
  }

  static const char* value(const ::blockChainPack_::rewriteNode_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::blockChainPack_::rewriteNode_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.arrayTransfer);
      stream.next(m.fileName);
      stream.next(m.logFile);
      stream.next(m.logHash);
      stream.next(m.fileOrArray);
      stream.next(m.REcounter);
      stream.next(m.carrier);
      stream.next(m.done);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct rewriteNode_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::blockChainPack_::rewriteNode_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::blockChainPack_::rewriteNode_<ContainerAllocator>& v)
  {
    s << indent << "arrayTransfer: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.arrayTransfer);
    s << indent << "fileName: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.fileName);
    s << indent << "logFile: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.logFile);
    s << indent << "logHash: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.logHash);
    s << indent << "fileOrArray: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.fileOrArray);
    s << indent << "REcounter: ";
    Printer<int64_t>::stream(s, indent + "  ", v.REcounter);
    s << indent << "carrier: ";
    Printer<int64_t>::stream(s, indent + "  ", v.carrier);
    s << indent << "done: ";
    Printer<int64_t>::stream(s, indent + "  ", v.done);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BLOCKCHAINPACK__MESSAGE_REWRITENODE_H
