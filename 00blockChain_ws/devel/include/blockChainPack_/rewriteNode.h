// Generated by gencpp from file blockChainPack_/rewriteNode.msg
// DO NOT EDIT!


#ifndef BLOCKCHAINPACK__MESSAGE_REWRITENODE_H
#define BLOCKCHAINPACK__MESSAGE_REWRITENODE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace blockChainPack_
{
template <class ContainerAllocator>
struct rewriteNode_
{
  typedef rewriteNode_<ContainerAllocator> Type;

  rewriteNode_()
    : blockNumber(0)
    , productNumber(0)
    , timeStamp()
    , transactions()
    , serialNumber()
    , blockHash()
    , previousHash()  {
    }
  rewriteNode_(const ContainerAllocator& _alloc)
    : blockNumber(0)
    , productNumber(0)
    , timeStamp(_alloc)
    , transactions(_alloc)
    , serialNumber(_alloc)
    , blockHash(_alloc)
    , previousHash(_alloc)  {
  (void)_alloc;
    }



   typedef int64_t _blockNumber_type;
  _blockNumber_type blockNumber;

   typedef int64_t _productNumber_type;
  _productNumber_type productNumber;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _timeStamp_type;
  _timeStamp_type timeStamp;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _transactions_type;
  _transactions_type transactions;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _serialNumber_type;
  _serialNumber_type serialNumber;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _blockHash_type;
  _blockHash_type blockHash;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _previousHash_type;
  _previousHash_type previousHash;





  typedef boost::shared_ptr< ::blockChainPack_::rewriteNode_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::blockChainPack_::rewriteNode_<ContainerAllocator> const> ConstPtr;

}; // struct rewriteNode_

typedef ::blockChainPack_::rewriteNode_<std::allocator<void> > rewriteNode;

typedef boost::shared_ptr< ::blockChainPack_::rewriteNode > rewriteNodePtr;
typedef boost::shared_ptr< ::blockChainPack_::rewriteNode const> rewriteNodeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::blockChainPack_::rewriteNode_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::blockChainPack_::rewriteNode_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace blockChainPack_

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'blockChainPack_': ['/home/ros/blockChainGit/00blockChain_ws/src/blockChainPack_/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::blockChainPack_::rewriteNode_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::blockChainPack_::rewriteNode_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::blockChainPack_::rewriteNode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::blockChainPack_::rewriteNode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::blockChainPack_::rewriteNode_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::blockChainPack_::rewriteNode_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::blockChainPack_::rewriteNode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "392845d38e7dbd0b3e34f5d6ba02ccf6";
  }

  static const char* value(const ::blockChainPack_::rewriteNode_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x392845d38e7dbd0bULL;
  static const uint64_t static_value2 = 0x3e34f5d6ba02ccf6ULL;
};

template<class ContainerAllocator>
struct DataType< ::blockChainPack_::rewriteNode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "blockChainPack_/rewriteNode";
  }

  static const char* value(const ::blockChainPack_::rewriteNode_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::blockChainPack_::rewriteNode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 blockNumber\n\
int64 productNumber\n\
string timeStamp\n\
string transactions\n\
string serialNumber\n\
string blockHash\n\
string previousHash\n\
";
  }

  static const char* value(const ::blockChainPack_::rewriteNode_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::blockChainPack_::rewriteNode_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.blockNumber);
      stream.next(m.productNumber);
      stream.next(m.timeStamp);
      stream.next(m.transactions);
      stream.next(m.serialNumber);
      stream.next(m.blockHash);
      stream.next(m.previousHash);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct rewriteNode_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::blockChainPack_::rewriteNode_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::blockChainPack_::rewriteNode_<ContainerAllocator>& v)
  {
    s << indent << "blockNumber: ";
    Printer<int64_t>::stream(s, indent + "  ", v.blockNumber);
    s << indent << "productNumber: ";
    Printer<int64_t>::stream(s, indent + "  ", v.productNumber);
    s << indent << "timeStamp: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.timeStamp);
    s << indent << "transactions: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.transactions);
    s << indent << "serialNumber: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.serialNumber);
    s << indent << "blockHash: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.blockHash);
    s << indent << "previousHash: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.previousHash);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BLOCKCHAINPACK__MESSAGE_REWRITENODE_H
